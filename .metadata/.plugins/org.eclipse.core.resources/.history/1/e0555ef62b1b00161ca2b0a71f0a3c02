package war_hand;

import java.util.ArrayList;

import core.Game;
import war_hand.WarHandPlayer;
import war_hand.WarHandRecord.WarHandPlayerState;
import core.Player;
import core.Record;
import msc.Card;
import msc.Deck;

public class WarHand extends Game {
	public static final int HAND_SIZE = 5;
	
	private Deck _deck1, _deck2;
	private ArrayList<ArrayList<Card>> _hands;
	private ArrayList<Integer> _score;
	private int _pot;
	
	private CardComparator _cardCmp;
	
	private WarHandRecord _record;
	
	
	
	public WarHand(ArrayList<Player> players) {
		super(players);
		WarHandPlayer[] truePlayers = new WarHandPlayer[2];
		truePlayers[0] = (WarHandPlayer) players.get(0);
		truePlayers[1] = (WarHandPlayer) players.get(1);
		
		init(0,1);
	}
	public WarHand(WarHandPlayer[] players) {
		super(players);
		
		init(0,1);
	}
	public WarHand(WarHandPlayer p1, WarHandPlayer p2) {
		super({p1,p2});
	}
	public WarHand(WarHandPlayer[] players, double shuffle_s, double shuffle_e) {
		super(players);
		
		init(shuffle_s, shuffle_e);
	}
	
	private void init(double s, double e) {
		//_deck = Deck.sortedDeck().shuffle(); //add interesting shuffling params here
		
		_deck1 = new Deck(true);
		_deck2 = new Deck(true);
		for (int suit=0; suit < 2; suit++) {
			for (int dots=1; dots < 14; dots++) {
				_deck1.addBottom(new Card(suit, dots));
				_deck2.addBottom(new Card(suit+2, dots));
			}
		}
		_deck1.shuffle(s, e);
		_deck2.shuffle(s, e);
		
		
		_cardCmp = new CardComparator();
		_record = new WarHandRecord();
		
		_hands = new ArrayList<ArrayList<Card>>();
		_score = new ArrayList<Integer>();
		
		_hands.add(_deck1.draw(HAND_SIZE));
		_hands.add(_deck2.draw(HAND_SIZE));
		_score.add(0);
		_score.add(0);
		
		_pot = 0;
	}

	@Override
	public WarHandRecord compete() {
		
		while (_hands.get(0).size() > 0) {
			WarHandPlayerState state1 = _record.new WarHandPlayerState();
			WarHandPlayerState state2 = _record.new WarHandPlayerState();
			for (Card c : this._hands.get(0)) {
				state1._hand.add(c);
			}
			for (Card c : this._hands.get(1)) {
				state2._hand.add(c);
			}
			ArrayList<WarHandPlayerState> playerStates = new ArrayList<WarHandPlayerState>();
			playerStates.add(state1);
			playerStates.add(state2);
			_record._player_states.add(playerStates);
			
			
			
			WarHandMove move0 = ((WarHandPlayer)_players[0]).getMove(this);
			Card card0 = _hands.get(0).remove(move0._cardID);

			WarHandMove move1 = ((WarHandPlayer)_players[1]).getMove(this);
			Card card1 = _hands.get(1).remove(move1._cardID);
			
			ArrayList<Card> roundMove = new ArrayList<Card>();
			roundMove.add(card0);
			roundMove.add(card1);
			_record._moves.add(roundMove);
			
			
			if (_cardCmp.compare(card0, card1) > 0) {
				_score.set(0, _score.get(0) + 1 + _pot);
				_pot = 0;
			} else if (_cardCmp.compare(card0, card1) < 0) {
				_score.set(1, _score.get(1) + 1 + _pot);
				_pot = 0;
			} else {
				//System.out.println(card0 + " == " + card1);
				_pot ++;
			}
			
			this.endRound();
		}
		
		Player winner = null;
		if (_score.get(0) > _score.get(1)) {
			winner = _players[0];
		} else if (_score.get(0) < _score.get(1)) {
			winner = _players[1];
		}
		_record._winner = winner;
		
		// TODO Auto-generated method stub
		return _record;
	}
	
	
	// deal new cards
	@Override
	protected void endRound() {
		super.endRound();
		
		if (!_deck1.isEmpty()) {
			_hands.get(0).add(_deck1.draw());
			_hands.get(1).add(_deck2.draw());
		}
	}
	
	
	// non-proprietary access methods
	public int getPot() {return _pot;}
	public int[] getScore() {
		int[] ans = new int[_numPlayers];
		for (int i=0; i<_numPlayers; i++) {
			ans[i] = _score.get(i);
		}
		
		return ans;
	}
	public Card[] getPrevPlay() {
		Card[] prev = {null, null};
		
		if (_record._moves.size() == 0) {
			return prev;
		} else {
			prev[0] = _record._moves.get(_record._moves.size()-1).get(0);
			prev[1] = _record._moves.get(_record._moves.size()-1).get(1);
		}
		
		return prev;
		
	}
	
	
	// proprietary access methods
	public Card[] getHand(Player player) {
		Card[] ans;
		for (int p=0; p<_numPlayers; p++) {
			if (_players[p] == player) {
				ans = new Card[_hands.get(p).size()];
				for (int i=0; i < _hands.get(p).size(); i++) {
					ans[i] = _hands.get(p).get(i);
				}
				return ans;
			}
		}
		
		return null;
	}
	

}
